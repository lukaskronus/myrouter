name: NewifiD2 - Test Build

on:
  push:
    paths:
      - 'config/newifi3_test.config'
  # schedule:
  #   - cron: '0 0 * * 6'
  workflow_dispatch:

env:
  CONFIG_FILE: config/newifi3_test.config
  DIY_02: scripts/only_test.sh

jobs:
  compile:
    name: ðŸ“¶NEWIFI D2ðŸ“¶
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: Clone source code
      run: |
        git clone --single-branch --filter=blob:none -b master https://github.com/coolsnowwolf/lede immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt
    
    - name: Prepare packages
      run: |
        chmod +x $DIY_02
        cd immortalwrt/
        $GITHUB_WORKSPACE/$DIY_02
       
    - name: Cache ImmortalWrt
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: true
        toolchain: true
        mixkey: 'ramips_test'
        prefix: ${{ github.workspace }}/immortalwrt
        
    - name: Load custom config
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
        cd immortalwrt && make defconfig
    
    - name: Download package
      working-directory: ./immortalwrt
      run: |
        make download -j48
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile the firmware
      working-directory: ./immortalwrt
      id: compile
      run: |
        make -j$(nproc) || make -j1 || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWRT_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: immortalwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Upload to 3rd-party firmware
      id: upload
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        zip -rj newifi3d2.zip $FIRMWARE
        curl -sL https://git.io/file-transfer | sh
        ./transfer fio --no-progress ./newifi3d2.zip 2>&1 | tee fio.log
        echo "::notice file=transfer.sh::$(cat fio.log | grep https)"
        echo "url=$(cat fio.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Telegram notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        MSG="
        Device: ${{ env.DEVICE_NAME }}
        Variation: ImmortalWrt Test Build
        Compiled on: ${{ env.FILE_DATE }}
        Download: ${{ steps.upload.outputs.url }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"
