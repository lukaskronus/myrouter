name: Build Newifi3 D2

on:
  push:
    paths:
      - 'config/newifi3.config'
  schedule:
    - cron: '0 0 * * 6'
  workflow_dispatch:

jobs:
  compile:
    name: ðŸ“¶ImmortalWRTðŸ“¶
    runs-on: ubuntu-20.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 2048
        root-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
    
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++ g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig clang python3-distutils rsync file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia\Ho_Chi_Minh"
        df -h

    - name: Clone source code
      run: |
        sudo chown -R runner:runner /home/runner/work/myrouter
        cp -r ./diy/. ./
        /bin/bash 01_resource.sh

    - name: Prepare packages
      run: |
        cd immortalwrt
        cp -r ../diy/. ./
        /bin/bash 02_packages.sh
        /bin/bash 03_mt7621.sh
       
    - name: Cache ImmortalWRT
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: true
        toolchain: true
        skip: true
        clean: false
        prefix: ${{ github.workspace }}/immortalwrt

    - name: Load custom config
      run: |
        cd immortalwrt
        mv ../config/newifi3.config .config
        make defconfig

    - name: Download package
      run: |
        cd immortalwrt
        make download -j48
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile the firmware
      id: compile
      run: |
        cd immortalwrt
        make -j$(nproc) V=m
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: ImmortalWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: immortalwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    #- name: Upload firmware to WeTransfer
    #  id: wetransfer
    #  if: steps.organize.outputs.status == 'success' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
    #    echo "::notice file=wetransfer.com::$(cat wetransfer.log | grep https)"
    #    echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: Telegram notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        MSG="
        Firmware: Newifi3 D2 - ImmortalWRT
        Compiled on: ${{ env.FILE_DATE }}
        Download: ${{ steps.wetransfer.outputs.url }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"
