name: Build Archer C6

on:
  push:
    paths:
      - 'config/archer_c6.config'
  # schedule:
  #   - cron: '0 0 * * 6'
  workflow_dispatch:

env:
  CONFIG_FILE: config/archer_c6.config

jobs:
  compile:
    name: ðŸ“¶ARCHER C6ðŸ“¶
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff -a
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install aria2
        sudo -E wget -P /usr/local/sbin/ https://github.com/HiGarfield/lede-17.01.4-Mod/raw/master/.github/backup/apt-fast
        sudo -E chmod -R 755 /usr/local/sbin/apt-fast
        sudo -E apt-fast -y -qq install subversion dwarves llvm clang lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl swig coreutils vim nano python3 python3-dev python3-pip python3-ply python3-pyelftools lrzsz scons
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global core.abbrev auto
        sudo timedatectl set-timezone "Asia/Ho_Chi_Minh"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: Clone source code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH --single-branch --filter=blob:none openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      
    - name: Cache OpenWRT
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: true
        toolchain: true
        skip: true
        clean: false
        prefix: ${{ github.workspace }}/openwrt

    - name: Load custom config
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
    
    - name: Install turboacc package
      working-directory: ./openwrt
      run: |
        mkdir -p turboacc_tmp ./package/turboacc
        cd turboacc_tmp 
        git clone https://github.com/chenmozhijin/turboacc -b package
        cd ../package/turboacc
        git clone https://github.com/fullcone-nat-nftables/nft-fullcone
        git clone https://github.com/chenmozhijin/turboacc
        mv ./turboacc/luci-app-turboacc ./luci-app-turboacc
        rm -rf ./turboacc
        cd ../..
        cp -f turboacc_tmp/turboacc/hack-5.15/952-add-net-conntrack-events-support-multiple-registrant.patch ./target/linux/generic/hack-5.15/52-add-net-conntrack-events-support-multiple-registrant.patch
        cp -f turboacc_tmp/turboacc/hack-5.15/953-net-patch-linux-kernel-to-support-shortcut-fe.patch ./target/linux/generic/hack-5.15/953-net-patch-linux-kernel-to-support-shortcut-fe.patch
        cp -f turboacc_tmp/turboacc/pending-5.15/613-netfilter_optional_tcp_window_check.patch ./target/linux/generic/pending-5.15/613-netfilter_optional_tcp_window_check.patch
        rm -rf ./package/libs/libnftnl ./package/network/config/firewall4 ./package/network/utils/nftables
        mkdir -p ./package/network/config/firewall4 ./package/libs/libnftnl ./package/network/utils/nftables
        cp -r ./turboacc_tmp/turboacc/shortcut-fe ./package/turboacc
        cp -RT ./turboacc_tmp/turboacc/firewall4-$(grep -o 'FIREWALL4_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/firewall4 ./package/network/config/firewall4
        cp -RT ./turboacc_tmp/turboacc/libnftnl-$(grep -o 'LIBNFTNL_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/libnftnl ./package/libs/libnftnl
        cp -RT ./turboacc_tmp/turboacc/nftables-$(grep -o 'NFTABLES_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/nftables ./package/network/utils/nftables
        rm -rf turboacc_tmp
        echo "# CONFIG_NF_CONNTRACK_CHAIN_EVENTS is not set" >> target/linux/generic/config-5.15
        echo "# CONFIG_SHORTCUT_FE is not set" >> target/linux/generic/config-5.15
        ./scripts/feeds update -a && ./scripts/feeds install -a
    
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j48
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile the firmware
      working-directory: ./openwrt
      id: compile
      run: |
        make -j$(nproc) || make -j1 || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWRT_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Upload to 3rd-party firmware
      id: upload
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        zip -rj archerC6.zip $FIRMWARE
        curl -sL https://git.io/file-transfer | sh
        ./transfer trs --no-progress ./archerC6.zip 2>&1 | tee trs.log
        echo "::notice file=transfer.sh::$(cat trs.log | grep https)"
        echo "url=$(cat trs.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Telegram notification
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        MSG="
        Device: ${{ env.DEVICE_NAME }}
        Variation: OpenWRT
        Compiled on: ${{ env.FILE_DATE }}
        Download: ${{ steps.upload.outputs.url }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"